import typing

class IconHandle:
    @classmethod
    def from_int(cls, value:int)->IconHandle:...
    @property
    def value(self)->int:...

def quit()->None:...
def mainloop()->None:...
def load_icon(filename:str, large:bool=False, index:int=0)->IconHandle:...

MouseMoveEventCallback:typing.TypeAlias = typing.Callable[[], typing.Any]
MouseButtonEventCallback:typing.TypeAlias = typing.Callable[[typing.Literal["left","mid","right"]], typing.Any]

class TrayIcon:
    def __init__(
        self,
        icon_handle: IconHandle,
        tip:str ="pywintray", 
        hidden:bool=False,
    )->None:...

    def show(self)->None:...
    def hide(self)->None:...
    def destroy(self)->None:...
    def update_icon(self, icon_handle: IconHandle)->None:...

    @property
    def tip(self)->str:...
    @tip.setter
    def tip(self, value:str)->None:...

    @property
    def hidden(self)->str:...

    @property
    def on_mouse_move(self) -> MouseMoveEventCallback|None:...
    @on_mouse_move.setter
    def on_mouse_move(self, value:MouseMoveEventCallback|None) -> None:...

    @property
    def on_mouse_button_down(self) -> MouseButtonEventCallback|None:...
    @on_mouse_button_down.setter
    def on_mouse_button_down(self, value:MouseButtonEventCallback|None) -> None:...

    @property
    def on_mouse_button_up(self) -> MouseButtonEventCallback|None:...
    @on_mouse_button_up.setter
    def on_mouse_button_up(self, value:MouseButtonEventCallback|None) -> None:...

    @property
    def on_mouse_double_click(self) -> MouseButtonEventCallback|None:...
    @on_mouse_double_click.setter
    def on_mouse_double_click(self, value:MouseButtonEventCallback|None) -> None:...

class Menu:
    @classmethod
    def popup(cls)->None:...
    @classmethod
    def as_tuple(cls)->tuple["MenuItem", ...]:...

MenuItemCallback: typing.TypeAlias = typing.Callable[[], typing.Any]

Separator: typing.TypeAlias = typing.Literal["separator"]
String: typing.TypeAlias = typing.Literal["string"]
Check: typing.TypeAlias = typing.Literal["check"]
Submenu: typing.TypeAlias = typing.Literal["submenu"]

T = typing.TypeVar(
    "T", 
    Separator,
    String,
    Check,
    Submenu,
)

@typing.final
class MenuItem(typing.Generic[T]):
    @classmethod
    def separator(cls)->MenuItem[Separator]:...
    @classmethod
    def string(cls, string:str)->MenuItem[String]:...
    @classmethod
    def check(cls, string:str, radio:bool=False, checked:bool=False)->MenuItem[Check]:...
    @classmethod
    def submenu(cls, string:str)->typing.Callable[[type[Menu]], MenuItem[Submenu]]:...

    def register_callback(self:MenuItem[String]|MenuItem[Check], fn:MenuItemCallback) -> MenuItemCallback:...

    @property
    def sub(self:MenuItem[Submenu])->type[Menu]:...

__version__:str
VERSION: tuple[int, int, int]
