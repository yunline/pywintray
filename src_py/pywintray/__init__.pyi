import typing

class IconHandle:
    @classmethod
    def from_int(cls, value:int)->IconHandle:...
    @property
    def value(self)->int:...

def quit()->None:...
def mainloop()->None:...
def load_icon(filename:str, large:bool=False, index:int=0)->IconHandle:...

MouseMoveEventCallback:typing.TypeAlias = typing.Callable[[], typing.Any]
MouseButtonEventCallback:typing.TypeAlias = typing.Callable[[typing.Literal["left","mid","right"]], typing.Any]

class TrayIcon:
    def __init__(
        self,
        icon_handle: IconHandle,
        tip:str ="pywintray", 
        hidden:bool=False,
    )->None:...

    def show(self)->None:...
    def hide(self)->None:...
    def destroy(self)->None:...
    def update_icon(self, icon_handle: IconHandle)->None:...

    @property
    def tip(self)->str:...
    @tip.setter
    def tip(self, value:str)->None:...

    @property
    def hidden(self)->str:...

    @property
    def on_mouse_move(self) -> MouseMoveEventCallback|None:...
    @on_mouse_move.setter
    def on_mouse_move(self, value:MouseMoveEventCallback|None) -> None:...

    @property
    def on_mouse_button_down(self) -> MouseButtonEventCallback|None:...
    @on_mouse_button_down.setter
    def on_mouse_button_down(self, value:MouseButtonEventCallback|None) -> None:...

    @property
    def on_mouse_button_up(self) -> MouseButtonEventCallback|None:...
    @on_mouse_button_up.setter
    def on_mouse_button_up(self, value:MouseButtonEventCallback|None) -> None:...

    @property
    def on_mouse_double_click(self) -> MouseButtonEventCallback|None:...
    @on_mouse_double_click.setter
    def on_mouse_double_click(self, value:MouseButtonEventCallback|None) -> None:...
